import logging
import os
import asyncio
import json
import yt_dlp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_TOKEN = os.getenv("API_TOKEN")  # —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ Render
MAX_FILE_SIZE_MB = 50
CACHE_DIR = "cache"
COOKIES_FILE = "cookies.txt"
TRACKS_FILE = "tracks.json"

WEBHOOK_HOST = os.getenv("WEBHOOK_HOST")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://telegram-music-bot-d9oz.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

os.makedirs(CACHE_DIR, exist_ok=True)

# === –ó–ê–ì–†–£–ó–ö–ê/–°–û–•–†–ê–ù–ï–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–û–í ===
def load_tracks():
    if os.path.exists(TRACKS_FILE):
        try:
            with open(TRACKS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_tracks():
    with open(TRACKS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_tracks, f, ensure_ascii=False, indent=2)

user_tracks = load_tracks()

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
class SearchStates(StatesGroup):
    waiting_for_search = State()

# === –ö–ù–û–ü–ö–ò ===
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫")],
        [KeyboardButton(text="üéº –ú–æ—è –º—É–∑—ã–∫–∞")],
        [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ],
    resize_keyboard=True
)

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.reply("üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: types.Message):
    await message.reply(
        "–Ø –∏—â—É —Ç—Ä–µ–∫–∏ –Ω–∞ YouTube –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –∏—Ö –≤ mp3. "
        "–ê —Ç–∞–∫–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ—è –º—É–∑—ã–∫–∞¬ª –±—É–¥—É—Ç –≤—Å–µ —Ç—Ä–µ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–∫–∞—á–∏–≤–∞–ª.\n\n"
        "üìå –ê–≤—Ç–æ—Ä: @wtfguys4\n"
        "–í—ã–±–µ—Ä–∏ ¬´üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫¬ª –∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ."
    )

@dp.message(F.text == "üîç –ù–∞–π—Ç–∏ —Ç—Ä–µ–∫")
async def ask_track_name(message: types.Message, state: FSMContext):
    await message.reply("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏:")
    await state.set_state(SearchStates.waiting_for_search)

@dp.message(F.text == "üéº –ú–æ—è –º—É–∑—ã–∫–∞")
async def my_music(message: types.Message):
    tracks = user_tracks.get(str(message.from_user.id), [])
    existing_tracks = [p for p in tracks if os.path.exists(p)]

    if len(existing_tracks) != len(tracks):
        user_tracks[str(message.from_user.id)] = existing_tracks
        save_tracks()

    if not existing_tracks:
        return await message.reply("üìÇ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.")

    await message.reply(f"üéß –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–≤–æ–∏ —Ç—Ä–µ–∫–∏ ({len(existing_tracks)} —à—Ç.) –ø–æ—Ä—Ü–∏—è–º–∏...")

    batch_size = 10
    for i in range(0, len(existing_tracks), batch_size):
        batch = existing_tracks[i:i + batch_size]
        for path in batch:
            try:
                await message.reply_audio(types.FSInputFile(path), title=os.path.basename(path))
                await asyncio.sleep(0.4)
            except Exception as e:
                await message.reply(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {os.path.basename(path)}: {e}")
        
        if i + batch_size < len(existing_tracks):
            await asyncio.sleep(2)

@dp.message(SearchStates.waiting_for_search, F.text)
async def search_music(message: types.Message, state: FSMContext):
    query = message.text.strip()
    await state.clear()
    await message.reply("üîç –ò—â—É —Ç—Ä–µ–∫–∏...")

    try:
        with yt_dlp.YoutubeDL({
            'format': 'bestaudio/best',
            'noplaylist': True,
            'quiet': True,
            'cookiefile': COOKIES_FILE
        }) as ydl:
            info = ydl.extract_info(f"ytsearch5:{query}", download=False)
            results = info.get("entries", [])
            if not results:
                return await message.reply("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")

            keyboard = [
                [InlineKeyboardButton(text=video.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), callback_data=f"dl:{video['id']}")]
                for video in results[:5]
            ]
            await message.reply("üé∂ –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫:", reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

@dp.callback_query(F.data.startswith("dl:"))
async def download_track(callback: types.CallbackQuery):
    video_id = callback.data.split(":")[1]
    url = f"https://www.youtube.com/watch?v={video_id}"
    await callback.message.edit_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é...")

    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': os.path.join(CACHE_DIR, '%(title)s.%(ext)s'),
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192'
        }],
        'cookiefile': COOKIES_FILE
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            filename = os.path.splitext(ydl.prepare_filename(info))[0] + ".mp3"

        size_mb = os.path.getsize(filename) / (1024 * 1024)
        if size_mb > MAX_FILE_SIZE_MB:
            os.remove(filename)
            return await callback.message.edit_text(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({size_mb:.1f} –ú–ë).")

        user_tracks.setdefault(str(callback.from_user.id), []).append(filename)
        save_tracks()

        await callback.message.edit_text("‚úÖ –¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç üéº (—Å–º. '–ú–æ—è –º—É–∑—ã–∫–∞')")

    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")

# === WEBHOOK –î–õ–Ø RENDER ===
async def handle_webhook(request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"Webhook handling error: {e}")
    return web.Response(text="ok")

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook set to {WEBHOOK_URL}")

async def on_shutdown(app):
    await bot.delete_webhook()

def start_web_app():
    app = web.Application()
    app.router.add_post(WEBHOOK_PATH, handle_webhook)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    port = int(os.getenv("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)

if __name__ == "__main__":
    start_web_app()
